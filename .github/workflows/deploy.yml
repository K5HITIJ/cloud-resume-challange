name: Deploy Cloud Resume Challenge

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: 3.9

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest boto3 moto requests flake8
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi
      
      - name: Run linting
        run: |
          flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: testing
          AWS_SECRET_ACCESS_KEY: testing
      
      - name: Run Lambda function tests
        run: |
          pytest tests/test_app.py -v
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: testing
          AWS_SECRET_ACCESS_KEY: testing

  deploy-staging:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    name: Deploy to Staging
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      
      - name: Build SAM application
        run: sam build -t template-simple.yaml
      
      - name: Deploy to staging
        run: |
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset \
            --template-file template-simple.yaml \
            --stack-name cloud-resume-staging \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides BucketName=cloud-resume-staging-bucket Environment=staging

  integration-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    name: Integration Tests
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests boto3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Run integration tests
        run: |
          sleep 30  # Wait for deployment to complete
          pytest tests/integration/ -v
        env:
          ENVIRONMENT: staging
          STACK_NAME: cloud-resume-staging

  deploy-production:
    needs: [test, integration-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: Deploy to Production
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      
      - name: Build SAM application
        run: sam build -t template-simple.yaml
      
      - name: Deploy to production
        run: |
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset \
            --template-file template-simple.yaml \
            --stack-name cloud-resume-challenge \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides BucketName=cloud-resume-challenge-bucket Environment=production
      
      - name: Upload frontend files
        run: |
          # Update API endpoint in JavaScript
          API_URL=$(aws cloudformation describe-stacks --stack-name cloud-resume-challenge --query "Stacks[0].Outputs[?OutputKey=='VisitorCounterApiUrl'].OutputValue" --output text)
          sed -i "s|https://.*amazonaws.com/Prod/visitor-count|$API_URL|g" frontend/script.js
          
          # Sync files to S3
          BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name cloud-resume-challenge --query "Stacks[0].Outputs[?OutputKey=='BucketName'].OutputValue" --output text)
          aws s3 sync frontend/ s3://$BUCKET_NAME
      
      - name: Invalidate CloudFront cache
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name cloud-resume-challenge \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" \
            --output text)
          if [ "$DISTRIBUTION_ID" != "None" ]; then
            aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/*"
            echo "‚úÖ CloudFront cache invalidated successfully"
          fi
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Production deployment completed successfully!"
          echo "üåê Website: https://dlwihg4xkk5ga.cloudfront.net"
          echo "üìä Visitor counter API is now live"
      
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed! Check the logs above."
